open import Data.Empty
open import Data.List hiding ([_]) renaming (_‚à∑_ to _‚à∑‚Çó_)
open import Data.Maybe
open import Data.Product
open import Data.Sum
open import Data.Unit

open import AEff
open import AwaitingComputations
open import EffectAnnotations
open import Preservation
open import Progress
open import Renamings
open import Substitutions renaming (‚ü®_,_‚ü© to ‚ü®_,,_‚ü©)
open import Types

open import Relation.Binary.PropositionalEquality hiding ([_])
open import Relation.Nullary
open import Relation.Nullary.Negation

module Finality where


-- SMALL-STEP OPERATIONAL SEMANTICS FOR WELL-TYPED COMPUTATIONS
-- WITH INLINED EVALUATION CONTEXT RULES

mutual

  infix 10 _‚Üù‚Üù_

  data _‚Üù‚Üù_ {Œì : Ctx} : {C : CType} ‚Üí Œì ‚ä¢C‚¶Ç C ‚Üí Œì ‚ä¢C‚¶Ç C ‚Üí Set where

    -- COMPUTATIONAL RULES

    apply           : {X : VType}
                      {C : CType} ‚Üí
                      (M : Œì ‚à∑ X ‚ä¢C‚¶Ç C) ‚Üí
                      (V : Œì ‚ä¢V‚¶Ç X) ‚Üí
                      ----------------------
                      (∆õ M) ¬∑ V
                      ‚Üù‚Üù
                      M [ sub-id [ V ]s ]c

    let-return      : {X Y : VType}
                      {o : O}
                      {i : I} ‚Üí 
                      (V : Œì ‚ä¢V‚¶Ç X) ‚Üí
                      (N : Œì ‚à∑ X ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                      -----------------------------
                      let= (return V) `in N
                      ‚Üù‚Üù
                      N [ sub-id [ V ]s ]c

    let-‚Üë           : {X Y : VType}
                      {o : O}
                      {i : I}
                      {op : Œ£‚Çõ} ‚Üí
                      (p : op ‚àà‚Çí o) ‚Üí
                      (V : Œì ‚ä¢V‚¶Ç proj‚ÇÅ (payload op)) ‚Üí
                      (M : Œì ‚ä¢C‚¶Ç X ! (o , i)) ‚Üí
                      (N : Œì ‚à∑ X ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                      --------------------------------
                      let= (‚Üë op p V M) `in N
                      ‚Üù‚Üù
                      ‚Üë op p V (let= M `in N)

    let-promise     : {X Y Z : VType}
                      {o o' : O}
                      {i i' : I}
                      {op : Œ£‚Çõ} ‚Üí
                      (p : (o' , i') ‚äë lkp·µ¢ op i) ‚Üí
                      (M‚ÇÅ : Œì ‚à∑ proj‚ÇÅ (payload op) ‚à∑ (ùüô ‚áí (‚ü® X ‚ü© ! (‚àÖ‚Çí , ‚àÖ·µ¢ [ op ‚Ü¶ just (o' , i') ]·µ¢))) ‚ä¢C‚¶Ç ‚ü® X ‚ü© ! (o' , i')) ‚Üí
                      (M‚ÇÇ : Œì ‚à∑ ‚ü® X ‚ü© ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                      (N : Œì ‚à∑ Y ‚ä¢C‚¶Ç Z ! (o , i)) ‚Üí
                      ---------------------------------------------------------------------------------------------------------
                      let= (promise op ‚à£ p ‚Ü¶ M‚ÇÅ `in M‚ÇÇ) `in N
                      ‚Üù‚Üù
                      (promise op ‚à£ p ‚Ü¶ M‚ÇÅ `in (let= M‚ÇÇ `in (C-rename (ren-cong ren-wk) N)))

    let-await       : {X Y Z : VType}
                      {o : O}
                      {i : I} ‚Üí
                      (V : Œì ‚ä¢V‚¶Ç ‚ü® X ‚ü©) ‚Üí
                      (M : Œì ‚à∑ X ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                      (N : Œì ‚à∑ Y ‚ä¢C‚¶Ç Z ! (o , i)) ‚Üí 
                      -------------------------------------------------------
                      let= (await V until M) `in N
                      ‚Üù‚Üù
                      await V until (let= M `in C-rename (ren-cong ren-wk) N)

    let-spawn       : {X Y : VType}
                      {C : CType}
                      {o : O}
                      {i : I} ‚Üí 
                      (M : Œì ‚ñ† ‚ä¢C‚¶Ç C) ‚Üí 
                      (N : Œì ‚ä¢C‚¶Ç X ! (o , i)) ‚Üí
                      (K : Œì ‚à∑ X ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                      ---------------------------------------
                      let= (spawn M N) `in K
                      ‚Üù‚Üù
                      spawn M (let= N `in K)

    promise-‚Üë       : {X Y : VType}
                      {o o' : O}
                      {i i' : I}
                      {op op' : Œ£‚Çõ} ‚Üí
                      (p : (o' , i') ‚äë lkp·µ¢ op i) ‚Üí
                      (q : op' ‚àà‚Çí o) ‚Üí
                      (V : Œì ‚à∑ ‚ü® X ‚ü© ‚ä¢V‚¶Ç proj‚ÇÅ (payload op')) ‚Üí 
                      (M : Œì ‚à∑ proj‚ÇÅ (payload op) ‚à∑ (ùüô ‚áí (‚ü® X ‚ü© ! (‚àÖ‚Çí , ‚àÖ·µ¢ [ op ‚Ü¶ just (o' , i') ]·µ¢))) ‚ä¢C‚¶Ç ‚ü® X ‚ü© ! (o' , i')) ‚Üí
                      (N : Œì ‚à∑ ‚ü® X ‚ü© ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                      --------------------------------------------------------------------------------------------------------
                      (promise op ‚à£ p ‚Ü¶ M `in (‚Üë op' q V N))
                      ‚Üù‚Üù
                      ‚Üë op' q (strengthen-val {Œî = X ‚à∑‚Çó []} (proj‚ÇÇ (payload op')) V) (promise op ‚à£ p ‚Ü¶ M `in N)

    promise-spawn   : {X Y : VType}
                      {C : CType}
                      {o o' : O}
                      {i i' : I}
                      {op : Œ£‚Çõ} ‚Üí
                      (p : (o' , i') ‚äë lkp·µ¢ op i) ‚Üí
                      (M : Œì ‚à∑ proj‚ÇÅ (payload op) ‚à∑ (ùüô ‚áí (‚ü® X ‚ü© ! (‚àÖ‚Çí , ‚àÖ·µ¢ [ op ‚Ü¶ just (o' , i') ]·µ¢))) ‚ä¢C‚¶Ç ‚ü® X ‚ü© ! (o' , i')) ‚Üí
                      (N : Œì ‚à∑ ‚ü® X ‚ü© ‚ñ† ‚ä¢C‚¶Ç C) ‚Üí 
                      (K : Œì ‚à∑ ‚ü® X ‚ü© ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                      ---------------------------------------------------------------------------------------------------------
                      (promise op ‚à£ p ‚Ü¶ M `in (spawn N K))
                      ‚Üù‚Üù
                      spawn (strengthen-‚ñ†-c {Œì' = []} {Œî = X ‚à∑‚Çó []} N) (promise op ‚à£ p ‚Ü¶ M `in K)

    ‚Üì-return        : {X : VType}
                      {o : O}
                      {i : I}
                      {op : Œ£‚Çõ} ‚Üí
                      (V : Œì ‚ä¢V‚¶Ç proj‚ÇÅ (payload op)) ‚Üí
                      (W : Œì ‚ä¢V‚¶Ç X) ‚Üí
                      ----------------------------------------------------------------
                      ‚Üì {o = o} {i = i} op V (return W)
                      ‚Üù‚Üù
                      return {o = proj‚ÇÅ (op ‚Üì‚Çë (o , i))} {i = proj‚ÇÇ (op ‚Üì‚Çë (o , i))} W

    ‚Üì-‚Üë             : {X : VType}
                      {o : O}
                      {i : I}
                      {op : Œ£‚Çõ}
                      {op' : Œ£‚Çõ} ‚Üí
                      (p : op' ‚àà‚Çí o) ‚Üí
                      (V : Œì ‚ä¢V‚¶Ç proj‚ÇÅ (payload op)) ‚Üí
                      (W : Œì ‚ä¢V‚¶Ç proj‚ÇÅ (payload op')) ‚Üí
                      (M : Œì ‚ä¢C‚¶Ç X ! (o , i)) ‚Üí
                      ---------------------------------
                      ‚Üì op V (‚Üë op' p W M)
                      ‚Üù‚Üù
                      ‚Üë op' (‚Üì‚Çë-‚äë‚Çí op' p) W (‚Üì op V M)


    ‚Üì-promise-op    : {X Y : VType}
                      {o o' : O}
                      {i i' : I}
                      {op : Œ£‚Çõ} ‚Üí
                      (p : (o' , i') ‚äë lkp·µ¢ op i) ‚Üí
                      (V : Œì ‚ä¢V‚¶Ç proj‚ÇÅ (payload op)) ‚Üí 
                      (M : Œì ‚à∑ proj‚ÇÅ (payload op) ‚à∑ (ùüô ‚áí (‚ü® X ‚ü© ! (‚àÖ‚Çí , ‚àÖ·µ¢ [ op ‚Ü¶ just (o' , i') ]·µ¢))) ‚ä¢C‚¶Ç ‚ü® X ‚ü© ! (o' , i')) ‚Üí
                      (N : Œì ‚à∑ ‚ü® X ‚ü© ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                      --------------------------------------------------------------------------------------------------------------------------------------------------------
                      ‚Üì op V (promise op ‚à£ p ‚Ü¶ M `in N )
                      ‚Üù‚Üù
                      (let= (coerce (‚äë‚Çí-trans (proj‚ÇÅ (‚äë-proj p (proj‚ÇÇ (proj‚ÇÇ (‚äë-just p))))) (‚Üì‚Çë-‚äë‚Çí-o' {o = o} (proj‚ÇÇ (proj‚ÇÇ (‚äë-just p)))))
                                    (‚äë·µ¢-trans (proj‚ÇÇ (‚äë-proj p (proj‚ÇÇ (proj‚ÇÇ (‚äë-just p))))) (‚Üì‚Çë-‚äë‚Çí-i' {o = o} (proj‚ÇÇ (proj‚ÇÇ (‚äë-just p)))))
                                    (M [ (sub-id [ V ]s)
                                       [ ∆õ (promise op ‚à£ subst (Œª oi ‚Üí (o' , i') ‚äë oi) (sym ite-‚â°) ‚äë-refl ‚Ü¶ C-rename (ren-cong (ren-cong ren-wk)) M `in return (` Hd)) ]s ]c))
                       `in (‚Üì op (V-rename ren-wk V) N))

    ‚Üì-promise-op'   : {X Y : VType}
                      {o o' : O}
                      {i i' : I}
                      {op op' : Œ£‚Çõ} ‚Üí
                      (p : ¬¨ op ‚â° op') ‚Üí
                      (q : (o' , i') ‚äë lkp·µ¢ op' i) ‚Üí
                      (V : Œì ‚ä¢V‚¶Ç proj‚ÇÅ (payload op)) ‚Üí 
                      (M : Œì ‚à∑ proj‚ÇÅ (payload op') ‚à∑ (ùüô ‚áí (‚ü® X ‚ü© ! (‚àÖ‚Çí , ‚àÖ·µ¢ [ op' ‚Ü¶ just (o' , i') ]·µ¢))) ‚ä¢C‚¶Ç ‚ü® X ‚ü© ! (o' , i')) ‚Üí
                      (N : Œì ‚à∑ ‚ü® X ‚ü© ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                      -----------------------------------------------------------------------------------------------------------
                      ‚Üì op V (promise op' ‚à£ q ‚Ü¶ M `in N )
                      ‚Üù‚Üù
                      promise op' ‚à£ (lkp·µ¢-‚Üì‚Çë-neq-‚äë {o = o} {i = i} p q) ‚Ü¶ M `in ‚Üì op (V-rename ren-wk V) N                                     

    ‚Üì-await        : {X Y : VType}
                     {o : O}
                     {i : I}
                     {op : Œ£‚Çõ} ‚Üí
                     (V : Œì ‚ä¢V‚¶Ç proj‚ÇÅ (payload op)) ‚Üí
                     (W : Œì ‚ä¢V‚¶Ç ‚ü® X ‚ü©) ‚Üí
                     (M : Œì ‚à∑ X ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                     ------------------------------------------
                     ‚Üì op V (await W until M)
                     ‚Üù‚Üù
                     await W until (‚Üì op (V-rename ren-wk V) M)

    ‚Üì-spawn         : {X : VType}
                      {C : CType}
                      {o : O}
                      {i : I}
                      {op : Œ£‚Çõ} ‚Üí
                      (V : Œì ‚ä¢V‚¶Ç proj‚ÇÅ (payload op)) ‚Üí
                      (M : Œì ‚ñ† ‚ä¢C‚¶Ç C) ‚Üí
                      (N : Œì ‚ä¢C‚¶Ç X ! (o , i)) ‚Üí
                      --------------------------------
                      ‚Üì op V (spawn M N)
                      ‚Üù‚Üù
                      spawn M (‚Üì op V N)

    await-promise   : {X : VType}
                      {C : CType} ‚Üí 
                      (V : Œì ‚ä¢V‚¶Ç X) ‚Üí 
                      (M : Œì ‚à∑ X ‚ä¢C‚¶Ç C) ‚Üí
                      --------------------
                      await ‚ü® V ‚ü© until M
                      ‚Üù‚Üù
                      M [ sub-id [ V ]s ]c

    box-unbox       : {X : VType}
                      {C : CType} ‚Üí
                      (V : Œì ‚ñ† ‚ä¢V‚¶Ç X) ‚Üí
                      (M : Œì ‚à∑ X ‚ä¢C‚¶Ç C) ‚Üí
                      ----------------------------------------
                      unbox (‚ñ° V) `in M
                      ‚Üù‚Üù
                      M [ ‚ü® sub-id ,, ‚ñ†-str-v {Œì' = []} V ‚ü© ]c


    -- INLINED EVALUATION CONTEXT RULES

    context-let      : {X Y : VType}
                       {o : O}
                       {i : I} ‚Üí 
                       {M M' : Œì ‚ä¢C‚¶Ç X ! (o , i)} ‚Üí
                       {N : Œì ‚à∑ X ‚ä¢C‚¶Ç Y ! (o , i)} ‚Üí
                       M ‚Üù‚Üù M' ‚Üí 
                       -----------------------------
                       let= M `in N
                       ‚Üù‚Üù
                       let= M' `in N

    context-‚Üë        : {X : VType}
                       {o : O}
                       {i : I}
                       {op : Œ£‚Çõ}
                       {p : op ‚àà‚Çí o}
                       {V : Œì ‚ä¢V‚¶Ç proj‚ÇÅ (payload op)}
                       {M N : Œì ‚ä¢C‚¶Ç X ! (o , i)} ‚Üí
                       M ‚Üù‚Üù N ‚Üí
                       ---------------------------
                       ‚Üë op p V M
                       ‚Üù‚Üù
                       ‚Üë op p V N

    context-‚Üì        : {X : VType}
                       {o : O}
                       {i : I}
                       {op : Œ£‚Çõ}
                       {V : Œì ‚ä¢V‚¶Ç proj‚ÇÅ (payload op)}
                       {M N : Œì ‚ä¢C‚¶Ç X ! (o , i)} ‚Üí
                       M ‚Üù‚Üù N ‚Üí
                       ------------------------------
                       ‚Üì op V M
                       ‚Üù‚Üù
                       ‚Üì op V N

    context-promise : {X Y : VType}
                      {o o' : O}
                      {i i' : I}
                      {op : Œ£‚Çõ} ‚Üí
                      {r : (o' , i') ‚äë lkp·µ¢ op i}
                      {M : Œì ‚à∑ proj‚ÇÅ (payload op) ‚à∑ (ùüô ‚áí (‚ü® X ‚ü© ! (‚àÖ‚Çí , ‚àÖ·µ¢ [ op ‚Ü¶ just (o' , i') ]·µ¢))) ‚ä¢C‚¶Ç ‚ü® X ‚ü© ! (o' , i')} ‚Üí
                      {N N' : Œì ‚à∑ ‚ü® X ‚ü© ‚ä¢C‚¶Ç Y ! (o , i)} ‚Üí
                      N ‚Üù‚Üù N' ‚Üí
                      --------------------------------------------------------------------------------------------------------
                      promise op ‚à£ r ‚Ü¶ M `in N
                      ‚Üù‚Üù
                      promise op ‚à£ r ‚Ü¶ M `in N'

    context-spawn   : {C D : CType}
                      {M : Œì ‚ñ† ‚ä¢C‚¶Ç C}
                      {N N' : Œì ‚ä¢C‚¶Ç D} ‚Üí
                      N ‚Üù‚Üù N' ‚Üí
                      ------------------
                      spawn M N
                      ‚Üù‚Üù
                      spawn M N'

    context-coerce  : {X : VType}
                      {o o' : O}
                      {i i' : I}
                      {p : o ‚äë‚Çí o'}
                      {q : i ‚äë·µ¢ i'} ‚Üí 
                      {M N : Œì ‚ä¢C‚¶Ç X ! (o , i)} ‚Üí
                      M ‚Üù‚Üù N ‚Üí
                      ---------------------------
                      coerce p q M
                      ‚Üù‚Üù
                      coerce p q N

    -- COERCION RULES

    coerce-return   : {X : VType}
                      {o o' : O}
                      {i i' : I}
                      {p : o ‚äë‚Çí o'}
                      {q : i ‚äë·µ¢ i'} ‚Üí 
                      (V : Œì ‚ä¢V‚¶Ç X) ‚Üí
                      --------------------------------
                      coerce p q (return V) ‚Üù‚Üù return V

    coerce-‚Üë        : {X : VType}
                      {o o' : O}
                      {i i' : I}
                      {p : o ‚äë‚Çí o'}
                      {q : i ‚äë·µ¢ i'}
                      {op : Œ£‚Çõ} ‚Üí 
                      (r : op ‚àà‚Çí o) ‚Üí
                      (V : Œì ‚ä¢V‚¶Ç proj‚ÇÅ (payload op)) ‚Üí
                      (M : Œì ‚ä¢C‚¶Ç X ! (o , i)) ‚Üí
                      -------------------------------
                      coerce p q (‚Üë op r V M)
                      ‚Üù‚Üù
                      ‚Üë op (p op r) V (coerce p q M)

    coerce-promise  : {X Y : VType}
                      {o o' o'' : O}
                      {i i' i'' : I}
                      {p : o ‚äë‚Çí o'}
                      {q : i ‚äë·µ¢ i'}
                      {op : Œ£‚Çõ} ‚Üí
                      (r : (o'' , i'') ‚äë lkp·µ¢ op i )
                      (M : Œì ‚à∑ proj‚ÇÅ (payload op) ‚à∑ (ùüô ‚áí (‚ü® X ‚ü© ! (‚àÖ‚Çí , ‚àÖ·µ¢ [ op ‚Ü¶ just (o'' , i'') ]·µ¢))) ‚ä¢C‚¶Ç ‚ü® X ‚ü© ! (o'' , i'')) ‚Üí
                      (N : Œì ‚à∑ ‚ü® X ‚ü© ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                      -------------------------------------------------------------------------------------------------------------
                      coerce p q (promise op ‚à£ r ‚Ü¶ M `in N)
                      ‚Üù‚Üù
                      promise_‚à£_‚Ü¶_`in_ op (subst (Œª oi ‚Üí (o'' , i'') ‚äë oi) (sym (lkp·µ¢-next-eq q (proj‚ÇÇ (proj‚ÇÇ (‚äë-just r)))))
                                            (‚äë-trans r (proj‚ÇÇ (proj‚ÇÇ (‚äë-just r))) (
                                              (lkp·µ¢-next-‚äë‚Çí q (proj‚ÇÇ (proj‚ÇÇ (‚äë-just r)))) ,
                                              (lkp·µ¢-next-‚äë·µ¢ q (proj‚ÇÇ (proj‚ÇÇ (‚äë-just r)))))))
                                          M
                                          (coerce p q N)

    coerce-await   : {X Y : VType}
                     {o o' : O}
                     {i i' : I}
                     {p : o ‚äë‚Çí o'}
                     {q : i ‚äë·µ¢ i'} ‚Üí
                     (V : Œì ‚ä¢V‚¶Ç ‚ü® X ‚ü©) ‚Üí
                     (M : Œì ‚à∑ X ‚ä¢C‚¶Ç Y ! (o , i)) ‚Üí
                     -----------------------------
                     coerce p q (await V until M)
                     ‚Üù‚Üù
                     await V until (coerce p q M)

    coerce-spawn   : {X : VType}
                     {C : CType}
                     {o o' : O}
                     {i i' : I}
                     {p : o ‚äë‚Çí o'}
                     {q : i ‚äë·µ¢ i'} ‚Üí
                     (M : Œì ‚ñ† ‚ä¢C‚¶Ç C) ‚Üí
                     (N : Œì ‚ä¢C‚¶Ç X ! (o , i)) ‚Üí 
                     -------------------------
                     coerce p q (spawn M N)
                     ‚Üù‚Üù
                     spawn M (coerce p q N)


-- ONE-TO-ONE CORRESPONDENCE BETWEEN THE TWO SETS OF REDUCTION RULES

‚Üù‚Üù-to-‚Üù : {Œì : Ctx}
          {C : CType}
          {M N : Œì ‚ä¢C‚¶Ç C} ‚Üí 
          M ‚Üù‚Üù N ‚Üí
          -----------------
          M ‚Üù N

‚Üù‚Üù-to-‚Üù (apply M V) =
  apply M V
‚Üù‚Üù-to-‚Üù (let-return V N) =
  let-return V N
‚Üù‚Üù-to-‚Üù (let-‚Üë p V M N) =
  let-‚Üë p V M N
‚Üù‚Üù-to-‚Üù (let-promise p M‚ÇÅ M‚ÇÇ N) =
  let-promise p M‚ÇÅ M‚ÇÇ N
‚Üù‚Üù-to-‚Üù (let-await V M N) =
  let-await V M N
‚Üù‚Üù-to-‚Üù (let-spawn M N K) =
  let-spawn M N K
‚Üù‚Üù-to-‚Üù (promise-‚Üë p q V M N) =
  promise-‚Üë p q V M N
‚Üù‚Üù-to-‚Üù (promise-spawn p M N K) =
  promise-spawn p M N K
‚Üù‚Üù-to-‚Üù (‚Üì-return V W) =
  ‚Üì-return V W
‚Üù‚Üù-to-‚Üù (‚Üì-‚Üë p V W M) =
  ‚Üì-‚Üë p V W M
‚Üù‚Üù-to-‚Üù (‚Üì-promise-op p V M N) =
  ‚Üì-promise-op p V M N
‚Üù‚Üù-to-‚Üù (‚Üì-promise-op' p q V M N) =
  ‚Üì-promise-op' p q V M N
‚Üù‚Üù-to-‚Üù (‚Üì-await V W M) =
  ‚Üì-await V W M
‚Üù‚Üù-to-‚Üù (‚Üì-spawn V M N) =
  ‚Üì-spawn V M N
‚Üù‚Üù-to-‚Üù (await-promise V M) =
  await-promise V M
‚Üù‚Üù-to-‚Üù (box-unbox V M) =
  box-unbox V M
‚Üù‚Üù-to-‚Üù (context-let r) =
  context _ (‚Üù‚Üù-to-‚Üù r)
‚Üù‚Üù-to-‚Üù (context-‚Üë r) =
  context _ (‚Üù‚Üù-to-‚Üù r)
‚Üù‚Üù-to-‚Üù (context-‚Üì r) =
  context _ (‚Üù‚Üù-to-‚Üù r)
‚Üù‚Üù-to-‚Üù (context-promise r) =
  context _ (‚Üù‚Üù-to-‚Üù r)
‚Üù‚Üù-to-‚Üù (context-spawn r) =
  context _ (‚Üù‚Üù-to-‚Üù r)
‚Üù‚Üù-to-‚Üù (context-coerce r) =
  context _ (‚Üù‚Üù-to-‚Üù r)
‚Üù‚Üù-to-‚Üù (coerce-return V) =
  coerce-return V
‚Üù‚Üù-to-‚Üù (coerce-‚Üë p V M) =
  coerce-‚Üë p V M
‚Üù‚Üù-to-‚Üù (coerce-promise p M N) =
  coerce-promise p M N
‚Üù‚Üù-to-‚Üù (coerce-await V M) =
  coerce-await V M
‚Üù‚Üù-to-‚Üù (coerce-spawn M N) =
  coerce-spawn M N


mutual
  ‚Üù-context-to-‚Üù‚Üù : {Œì : Ctx}
                    {Œî : BCtx}
                    {C : CType} ‚Üí 
                    (E : Œì ‚ä¢E[ Œî ]‚¶Ç C) ‚Üí 
                    {M N : (Œì ‚ãà Œî) ‚ä¢C‚¶Ç hole-ty-e E} ‚Üí 
                    M ‚Üù N ‚Üí
                    ---------------------------------
                    E [ M ] ‚Üù‚Üù E [ N ]

  ‚Üù-context-to-‚Üù‚Üù [-] r =
    ‚Üù-to-‚Üù‚Üù r
  ‚Üù-context-to-‚Üù‚Üù (let= E `in x) r =
    context-let (‚Üù-context-to-‚Üù‚Üù E r)
  ‚Üù-context-to-‚Üù‚Üù (‚Üë op p V E) r =
    context-‚Üë (‚Üù-context-to-‚Üù‚Üù E r)
  ‚Üù-context-to-‚Üù‚Üù (‚Üì op V E) r =
    context-‚Üì (‚Üù-context-to-‚Üù‚Üù E r)
  ‚Üù-context-to-‚Üù‚Üù (promise op ‚à£ p ‚Ü¶ M `in E) r =
    context-promise (‚Üù-context-to-‚Üù‚Üù E r)
  ‚Üù-context-to-‚Üù‚Üù (spawn M E) r =
    context-spawn (‚Üù-context-to-‚Üù‚Üù E r) 
  ‚Üù-context-to-‚Üù‚Üù (coerce p q E) r =
    context-coerce (‚Üù-context-to-‚Üù‚Üù E r)
  
 
  ‚Üù-to-‚Üù‚Üù : {Œì : Ctx}
            {C : CType}
            {M N : Œì ‚ä¢C‚¶Ç C} ‚Üí 
            M ‚Üù N ‚Üí
            -----------------
            M ‚Üù‚Üù N

  ‚Üù-to-‚Üù‚Üù (apply M V) =
    apply M V
  ‚Üù-to-‚Üù‚Üù (let-return V N) =
    let-return V N
  ‚Üù-to-‚Üù‚Üù (let-‚Üë p V M N) =
    let-‚Üë p V M N
  ‚Üù-to-‚Üù‚Üù (let-promise p M‚ÇÅ M‚ÇÇ N) =
    let-promise p M‚ÇÅ M‚ÇÇ N
  ‚Üù-to-‚Üù‚Üù (let-await V M N) =
    let-await V M N
  ‚Üù-to-‚Üù‚Üù (let-spawn M N K) =
    let-spawn M N K
  ‚Üù-to-‚Üù‚Üù (promise-‚Üë p q V M N) =
    promise-‚Üë p q V M N
  ‚Üù-to-‚Üù‚Üù (promise-spawn p M N K) =
    promise-spawn p M N K
  ‚Üù-to-‚Üù‚Üù (‚Üì-return V W) =
    ‚Üì-return V W
  ‚Üù-to-‚Üù‚Üù (‚Üì-‚Üë p V W M) =
    ‚Üì-‚Üë p V W M
  ‚Üù-to-‚Üù‚Üù (‚Üì-promise-op p V M N) =
    ‚Üì-promise-op p V M N
  ‚Üù-to-‚Üù‚Üù (‚Üì-promise-op' p q V M N) =
    ‚Üì-promise-op' p q V M N
  ‚Üù-to-‚Üù‚Üù (‚Üì-await V W M) =
    ‚Üì-await V W M
  ‚Üù-to-‚Üù‚Üù (‚Üì-spawn V M N) =
    ‚Üì-spawn V M N
  ‚Üù-to-‚Üù‚Üù (await-promise V M) =
    await-promise V M
  ‚Üù-to-‚Üù‚Üù (box-unbox V M) =
    box-unbox V M
  ‚Üù-to-‚Üù‚Üù (context E r) =
    ‚Üù-context-to-‚Üù‚Üù E r
  ‚Üù-to-‚Üù‚Üù (coerce-return V) =
    coerce-return V
  ‚Üù-to-‚Üù‚Üù (coerce-‚Üë p V M) =
    coerce-‚Üë p V M
  ‚Üù-to-‚Üù‚Üù (coerce-promise p M N) =
    coerce-promise p M N
  ‚Üù-to-‚Üù‚Üù (coerce-await V M) =
    coerce-await V M
  ‚Üù-to-‚Üù‚Üù (coerce-spawn M N) =
    coerce-spawn M N


-- FINALITY OF RESULT FORMS

run-finality-‚Üù‚Üù : {Œì : MCtx}
                  {C : CType}
                  {M N : ‚ü®‚ü® Œì ‚ü©‚ü© ‚ä¢C‚¶Ç C} ‚Üí 
                  RunResult‚ü® Œì ‚à£ M ‚ü© ‚Üí
                  M ‚Üù‚Üù N ‚Üí
                  -----------------------
                  ‚ä•

run-finality-‚Üù‚Üù (promise ()) (promise-‚Üë p q V M N)
run-finality-‚Üù‚Üù (promise ()) (promise-spawn p M N K)
run-finality-‚Üù‚Üù (promise R) (context-promise r) =
  run-finality-‚Üù‚Üù R r


comp-finality-‚Üù‚Üù : {Œì : MCtx}
                   {C : CType}
                   {M N : ‚ü®‚ü® Œì ‚ü©‚ü© ‚ä¢C‚¶Ç C} ‚Üí 
                   CompResult‚ü® Œì ‚à£ M ‚ü© ‚Üí
                   M ‚Üù‚Üù N ‚Üí
                   -----------------------
                   ‚ä•

comp-finality-‚Üù‚Üù (comp R) r =
  run-finality-‚Üù‚Üù R r
comp-finality-‚Üù‚Üù (signal R) (context-‚Üë r) =
  comp-finality-‚Üù‚Üù R r
comp-finality-‚Üù‚Üù (spawn R) (context-spawn r) =
  comp-finality-‚Üù‚Üù R r


comp-finality : {Œì : MCtx}
                {C : CType}
                {M N : ‚ü®‚ü® Œì ‚ü©‚ü© ‚ä¢C‚¶Ç C} ‚Üí 
                CompResult‚ü® Œì ‚à£ M ‚ü© ‚Üí
                M ‚Üù N ‚Üí
                -----------------------
                ‚ä•

comp-finality R r =
  comp-finality-‚Üù‚Üù R (‚Üù-to-‚Üù‚Üù r)



